{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./num.css';// Import CSS for styling\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";const NumberCounters=_ref=>{let{endCount,label}=_ref;const[count,setCount]=useState(0);const[isCounting,setIsCounting]=useState(false);const counterRef=useRef(null);useEffect(()=>{const observer=new IntersectionObserver(_ref2=>{let[entry]=_ref2;if(entry.isIntersecting){setIsCounting(true);}},{threshold:0.5// Change this threshold value as needed\n});if(counterRef.current){observer.observe(counterRef.current);}return()=>{if(counterRef.current){observer.unobserve(counterRef.current);}};},[]);useEffect(()=>{if(isCounting){const timer=setInterval(()=>{if(count<endCount){setCount(prevCount=>prevCount+1);}else{clearInterval(timer);}},60);// Adjust speed of counting animation here\nreturn()=>clearInterval(timer);}},[count,endCount,isCounting]);return/*#__PURE__*/_jsxs(\"div\",{className:\"number-counter\",ref:counterRef,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"count\",children:[count.toLocaleString(),\" +\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"line\"}),/*#__PURE__*/_jsx(\"div\",{className:\"label\",children:label})]});};export default NumberCounters;// import React, { useState, useEffect } from 'react';\n// import './num.css'; \n// const NumberCounters = ({ endCount, label }) => {\n//   const [count, setCount] = useState(0);\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       if (count < endCount) {\n//         setCount(prevCount => prevCount + 1);\n//       } else {\n//         clearInterval(timer);\n//       }\n//     }, 50); \n//     return () => clearInterval(timer);\n//   }, [count, endCount]);\n//   return (\n//     <div className=\"number-counter\">\n//       <div className=\"count\">{count.toLocaleString()} +</div>\n//       <div className='line'></div>\n//       <div className=\"label\">{label}</div>\n//     </div>\n//   );\n// };\n// export default NumberCounters;\n// import React, { useState, useEffect } from 'react';\n// import './num.css'; // Import CSS for styling\n// const NumberCounters = ({ endCount, label }) => {\n//   const [count, setCount] = useState(0);\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       if (count < endCount) {\n//         setCount(prevCount => prevCount + 1);\n//       } else {\n//         clearInterval(timer);\n//       }\n//     }, 50); \n//     return () => clearInterval(timer);\n//   }, [count, endCount]);\n//   return (\n//     <div className=\"number-counter\">\n//       <div className=\"count\">{count}</div>\n//       <div className=\"label\">{label}</div>\n//     </div>\n//   );\n// };\n// export default NumberCounters;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxs","_jsxs","jsx","_jsx","NumberCounters","_ref","endCount","label","count","setCount","isCounting","setIsCounting","counterRef","observer","IntersectionObserver","_ref2","entry","isIntersecting","threshold","current","observe","unobserve","timer","setInterval","prevCount","clearInterval","className","ref","children","toLocaleString"],"sources":["C:/Users/SATHISH L/Documents/vivid_events/frontend/src/Components/Aboutus/num_cont/num.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './num.css'; // Import CSS for styling\r\n\r\nconst NumberCounters = ({ endCount, label }) => {\r\n  const [count, setCount] = useState(0);\r\n  const [isCounting, setIsCounting] = useState(false);\r\n  const counterRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setIsCounting(true);\r\n        }\r\n      },\r\n      {\r\n        threshold: 0.5, // Change this threshold value as needed\r\n      }\r\n    );\r\n\r\n    if (counterRef.current) {\r\n      observer.observe(counterRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (counterRef.current) {\r\n        observer.unobserve(counterRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isCounting) {\r\n      const timer = setInterval(() => {\r\n        if (count < endCount) {\r\n          setCount(prevCount => prevCount + 1);\r\n        } else {\r\n          clearInterval(timer);\r\n        }\r\n      }, 60); // Adjust speed of counting animation here\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [count, endCount, isCounting]);\r\n\r\n  return (\r\n    <div className=\"number-counter\" ref={counterRef}>\r\n      <div className=\"count\">{count.toLocaleString()} +</div>\r\n      <div className='line'></div>\r\n      {/* <div className='line'></div> */}\r\n      <div className=\"label\">{label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberCounters;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './num.css'; \r\n\r\n// const NumberCounters = ({ endCount, label }) => {\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       if (count < endCount) {\r\n//         setCount(prevCount => prevCount + 1);\r\n//       } else {\r\n//         clearInterval(timer);\r\n//       }\r\n//     }, 50); \r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [count, endCount]);\r\n\r\n//   return (\r\n//     <div className=\"number-counter\">\r\n//       <div className=\"count\">{count.toLocaleString()} +</div>\r\n     \r\n//       <div className='line'></div>\r\n      \r\n//       <div className=\"label\">{label}</div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NumberCounters;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './num.css'; // Import CSS for styling\r\n\r\n// const NumberCounters = ({ endCount, label }) => {\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       if (count < endCount) {\r\n//         setCount(prevCount => prevCount + 1);\r\n//       } else {\r\n//         clearInterval(timer);\r\n//       }\r\n//     }, 50); \r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [count, endCount]);\r\n\r\n//   return (\r\n//     <div className=\"number-counter\">\r\n//       <div className=\"count\">{count}</div>\r\n//       <div className=\"label\">{label}</div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NumberCounters;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,WAAW,CAAE;AAAA,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAEpB,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAyB,IAAxB,CAAEC,QAAQ,CAAEC,KAAM,CAAC,CAAAF,IAAA,CACzC,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAACa,UAAU,CAAEC,aAAa,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAAAe,UAAU,CAAGb,MAAM,CAAC,IAAI,CAAC,CAE/BD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,QAAQ,CAAG,GAAI,CAAAC,oBAAoB,CACvCC,KAAA,EAAa,IAAZ,CAACC,KAAK,CAAC,CAAAD,KAAA,CACN,GAAIC,KAAK,CAACC,cAAc,CAAE,CACxBN,aAAa,CAAC,IAAI,CAAC,CACrB,CACF,CAAC,CACD,CACEO,SAAS,CAAE,GAAK;AAClB,CACF,CAAC,CAED,GAAIN,UAAU,CAACO,OAAO,CAAE,CACtBN,QAAQ,CAACO,OAAO,CAACR,UAAU,CAACO,OAAO,CAAC,CACtC,CAEA,MAAO,IAAM,CACX,GAAIP,UAAU,CAACO,OAAO,CAAE,CACtBN,QAAQ,CAACQ,SAAS,CAACT,UAAU,CAACO,OAAO,CAAC,CACxC,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAENrB,SAAS,CAAC,IAAM,CACd,GAAIY,UAAU,CAAE,CACd,KAAM,CAAAY,KAAK,CAAGC,WAAW,CAAC,IAAM,CAC9B,GAAIf,KAAK,CAAGF,QAAQ,CAAE,CACpBG,QAAQ,CAACe,SAAS,EAAIA,SAAS,CAAG,CAAC,CAAC,CACtC,CAAC,IAAM,CACLC,aAAa,CAACH,KAAK,CAAC,CACtB,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,MAAO,IAAMG,aAAa,CAACH,KAAK,CAAC,CACnC,CACF,CAAC,CAAE,CAACd,KAAK,CAAEF,QAAQ,CAAEI,UAAU,CAAC,CAAC,CAEjC,mBACET,KAAA,QAAKyB,SAAS,CAAC,gBAAgB,CAACC,GAAG,CAAEf,UAAW,CAAAgB,QAAA,eAC9C3B,KAAA,QAAKyB,SAAS,CAAC,OAAO,CAAAE,QAAA,EAAEpB,KAAK,CAACqB,cAAc,CAAC,CAAC,CAAC,IAAE,EAAK,CAAC,cACvD1B,IAAA,QAAKuB,SAAS,CAAC,MAAM,CAAM,CAAC,cAE5BvB,IAAA,QAAKuB,SAAS,CAAC,OAAO,CAAAE,QAAA,CAAErB,KAAK,CAAM,CAAC,EACjC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAH,cAAc,CAO7B;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}