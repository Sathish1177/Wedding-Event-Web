{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SATHISH L\\\\Documents\\\\vivid_events\\\\frontend\\\\src\\\\Components\\\\Aboutus\\\\num_cont\\\\num.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './num.css'; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NumberCounters = ({\n  endCount,\n  label\n}) => {\n  _s();\n  const [count, setCount] = useState(0);\n  const [isCounting, setIsCounting] = useState(false);\n  const counterRef = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        setIsCounting(true);\n      }\n    }, {\n      threshold: 0.5 // Change this threshold value as needed\n    });\n    if (counterRef.current) {\n      observer.observe(counterRef.current);\n    }\n    return () => {\n      if (counterRef.current) {\n        observer.unobserve(counterRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (isCounting) {\n      const timer = setInterval(() => {\n        if (count < endCount) {\n          setCount(prevCount => prevCount + 1);\n        } else {\n          clearInterval(timer);\n        }\n      }, 60); // Adjust speed of counting animation here\n\n      return () => clearInterval(timer);\n    }\n  }, [count, endCount, isCounting]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"number-counter\",\n    ref: counterRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"count\",\n      children: [count.toLocaleString(), \" +\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(NumberCounters, \"LYWcTkyo+5k3prvvc+CthABbSzg=\");\n_c = NumberCounters;\nexport default NumberCounters;\n\n// import React, { useState, useEffect } from 'react';\n// import './num.css'; \n\n// const NumberCounters = ({ endCount, label }) => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       if (count < endCount) {\n//         setCount(prevCount => prevCount + 1);\n//       } else {\n//         clearInterval(timer);\n//       }\n//     }, 50); \n\n//     return () => clearInterval(timer);\n//   }, [count, endCount]);\n\n//   return (\n//     <div className=\"number-counter\">\n//       <div className=\"count\">{count.toLocaleString()} +</div>\n\n//       <div className='line'></div>\n\n//       <div className=\"label\">{label}</div>\n//     </div>\n//   );\n// };\n\n// export default NumberCounters;\n\n// import React, { useState, useEffect } from 'react';\n// import './num.css'; // Import CSS for styling\n\n// const NumberCounters = ({ endCount, label }) => {\n//   const [count, setCount] = useState(0);\n\n//   useEffect(() => {\n//     const timer = setInterval(() => {\n//       if (count < endCount) {\n//         setCount(prevCount => prevCount + 1);\n//       } else {\n//         clearInterval(timer);\n//       }\n//     }, 50); \n\n//     return () => clearInterval(timer);\n//   }, [count, endCount]);\n\n//   return (\n//     <div className=\"number-counter\">\n//       <div className=\"count\">{count}</div>\n//       <div className=\"label\">{label}</div>\n//     </div>\n//   );\n// };\n\n// export default NumberCounters;\nvar _c;\n$RefreshReg$(_c, \"NumberCounters\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","NumberCounters","endCount","label","_s","count","setCount","isCounting","setIsCounting","counterRef","observer","IntersectionObserver","entry","isIntersecting","threshold","current","observe","unobserve","timer","setInterval","prevCount","clearInterval","className","ref","children","toLocaleString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SATHISH L/Documents/vivid_events/frontend/src/Components/Aboutus/num_cont/num.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './num.css'; // Import CSS for styling\r\n\r\nconst NumberCounters = ({ endCount, label }) => {\r\n  const [count, setCount] = useState(0);\r\n  const [isCounting, setIsCounting] = useState(false);\r\n  const counterRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setIsCounting(true);\r\n        }\r\n      },\r\n      {\r\n        threshold: 0.5, // Change this threshold value as needed\r\n      }\r\n    );\r\n\r\n    if (counterRef.current) {\r\n      observer.observe(counterRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (counterRef.current) {\r\n        observer.unobserve(counterRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isCounting) {\r\n      const timer = setInterval(() => {\r\n        if (count < endCount) {\r\n          setCount(prevCount => prevCount + 1);\r\n        } else {\r\n          clearInterval(timer);\r\n        }\r\n      }, 60); // Adjust speed of counting animation here\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [count, endCount, isCounting]);\r\n\r\n  return (\r\n    <div className=\"number-counter\" ref={counterRef}>\r\n      <div className=\"count\">{count.toLocaleString()} +</div>\r\n      <div className='line'></div>\r\n      {/* <div className='line'></div> */}\r\n      <div className=\"label\">{label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberCounters;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './num.css'; \r\n\r\n// const NumberCounters = ({ endCount, label }) => {\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       if (count < endCount) {\r\n//         setCount(prevCount => prevCount + 1);\r\n//       } else {\r\n//         clearInterval(timer);\r\n//       }\r\n//     }, 50); \r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [count, endCount]);\r\n\r\n//   return (\r\n//     <div className=\"number-counter\">\r\n//       <div className=\"count\">{count.toLocaleString()} +</div>\r\n     \r\n//       <div className='line'></div>\r\n      \r\n//       <div className=\"label\">{label}</div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NumberCounters;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import './num.css'; // Import CSS for styling\r\n\r\n// const NumberCounters = ({ endCount, label }) => {\r\n//   const [count, setCount] = useState(0);\r\n\r\n//   useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       if (count < endCount) {\r\n//         setCount(prevCount => prevCount + 1);\r\n//       } else {\r\n//         clearInterval(timer);\r\n//       }\r\n//     }, 50); \r\n\r\n//     return () => clearInterval(timer);\r\n//   }, [count, endCount]);\r\n\r\n//   return (\r\n//     <div className=\"number-counter\">\r\n//       <div className=\"count\">{count}</div>\r\n//       <div className=\"label\">{label}</div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NumberCounters;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}